<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--------------------------------------------------------------------------->  
<!--                           INTRODUCTION                                

 The Code Project article submission template (HTML version)

Using this template will help us post your article sooner. To use, just 
follow the 3 easy steps below:
 
     1. Fill in the article description details
     2. Add links to your images and downloads
     3. Include the main article text

That's all there is to it! All formatting will be done by our submission
scripts and style sheets. 

-->  
<!--------------------------------------------------------------------------->  
<!--                        IGNORE THIS SECTION                            -->
<html>
<head>
<title>The Code Project</title>
<Style>
BODY, P, TD { font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10pt }
H2,H3,H4,H5 { color: #ff9900; font-weight: bold; }
H2 { font-size: 13pt; }
H3 { font-size: 12pt; }
H4 { font-size: 10pt; color: black; }
PRE { BACKGROUND-COLOR: #FBEDBB; FONT-FAMILY: "Courier New", Courier, mono; WHITE-SPACE: pre; }
CODE { COLOR: #990000; FONT-FAMILY: "Courier New", Courier, mono; }
</style>
<link rel="stylesheet" type="text/css" href="http://www.codeproject.com/App_Themes/Std/CodeProject.css">
</head>
<body bgcolor="#FFFFFF" color=#000000>
<!--------------------------------------------------------------------------->  


<!-------------------------------     STEP 1      --------------------------->
<!--  Fill in the details (CodeProject will reformat this section for you) -->

<pre>
Title:       Change of Basis for Rotations and Vectors
Author:      Scott M. Johnson (suggested user name ScottJohnson2718)
Email:       ScottJohnson2718@gmail.com
Language:    C/C++
Platform:    It should be platform independent though I only compiled it in Visual Studio 2010
Technology:  n/a
Level:       Beginners can use it.  It is advanced to understand how it works.
Description: This code transforms rotations and vectors between reference frames such as Unreal, 3d Studio Max, etc.
Section      Wow, I have no idea.
SubSection   Wow, I have no idea.
License:     Apache V2.0
</pre>

<!-------------------------------     STEP 2      --------------------------->
<!--  Include download and sample image information.                       --> 

<ul class=download>
<li><a href="ChangeOfBasisCode.zip">Download Source Code</a></li>
<li><a href="ChangeOfBasis.pdf">Download the Math Derivation</a></li>
</ul>



<!-------------------------------     STEP 3      --------------------------->

<!--  Add the article text. Please use simple formatting (<h2>, <p> etc)   -->

<h2>Introduction</h2>

<p>If you ever have orientations that exist in one frame and need to convert them to another frame then you need a change of basis.
If you Google the term "Change of Basis" you will find lots of examples of how multiplying a 3x3 matrix by a vector in 3 space performs 
a Change of Basis.  What is missing online is the case where you have an orientation, say from 3D Studio Max, and you need to use it in a game engine like Unreal.
The orientation could be a matrix, a quaternion or Euler angles.  It is not straightforward how you generically can take an orientation in one frame and 
convert to another frame.  The provided code makes this simple without knowing any of the math.  The code is designed so that you can add the Change of Basis
to an existing math library, as long as you are familiar with the conventions of the math library such as whether it uses column matrices or row matrices.  </p>
<p> The code has direct applications when doing work with sensors and Virtual Reality.  IMU sensors all report their orientations in space using quaternions.
You need to take the quaternion from the sensor and put it into the frame that your application uses.  For instance, I frequently use sensors from a vendor
that uses X = Right, Y = Forward, Z = Up.  I have to use those rotations in Unreal 3 where the global frame is X = Forward, Y = Right, Z = Up.  I also have 
to use the same rotations in an OpenGL application that uses X = Left, Y = Up, Z = Forward.  The attached code makes this so simple that you will never think
about it again.  The code also works without any floating point operations that would change the components of the rotation other than permuting them or changing
their sign.  This goes with the notion that changing the frame shouldn't change the rotation at all. </p>
<p> The part of the problem that I cannot help solve is that too much code uses reference frames implicitly.  In those cases, you will have to reverse engineer
what the axes are.  When you are lucky, the reference frame you need is explicitly printed in manuals or even shown as an axis frame on the screen with the X
axis in red, the Y axis in green and the Z axis in blue.  Or you will find that the reference frame convention is not well defined as is the case with the BVH
animation format.  Some applications use Y = Up and some applications use Z = Up.

<h2>How the code was written</h2>

The code was mostly generated.  No one could write out that many cases without going nuts.  The matrix change of basis was derived as in the 
the attached document.  The quaternion version comes from symbolically changing the quaternion to a matrix, performing the matrix change of basis, and then
converting back to a matrix.  The operation was written for a symbolic math tool called Maxima.  Maxima simplified the results into a pattern that I could follow.
Then I wrote a code generator to create that pattern.  The same method was performed for the Euler change of basis.

<h2>Using the code</h2>

<p> The use case for using the code intends to be very simple.  Determine the two reference frames that you need to convert between and get a 
case number from them.  If you see the code, you'll see why the variable is called 'caseNumber'.  Then pass in the caseNumber to the function
that does the change of basis, either quatCob() or matrixCob3x3(). 
</p>
<p>
The code is meant to be added to your exsting code as source.  Just put the source files in with your other code and compile.
</p>

<pre>
	using namespace cob;
	
	triple sensorVendor( RIGHT, FORWARD, UP );
	triple unreal3( FORWARD, RIGHT, UP );
	
	// This sets up the transform from the sensor vendor's frame to the Unreal 3 frame
	int caseNumber = getCaseNumber( sensorVendor, unreal3 );
	
	// assume that there is a Quaternion class whose components are qx, qy, qz, and qw;
	Quaternion sensor = getSensorRotationFromSensorHardware();
	
	// This takes the sensor quaternion in the sensor vendor's frame and changes it to the Unreal 3 frame
	quatCob( caseNumber, sensor.qx, sensor.qy, sensor.qz, sensor.qw );
</pre>

<p> Here is the same example only done with matrices. </p>

<pre>
	using namespace cob;
	
	triple sensorVendor( RIGHT, FORWARD, UP );
	triple unreal3( FORWARD, RIGHT, UP );
	
	// This sets up the transform from the sensor vendor's frame to the Unreal 3 frame
	int caseNumber = getCaseNumber( sensorVendor, unreal3 );
	
	// assume that there is a 3x3 matrix class whose members are 
	// m00, m01, m02,
	// m10, m11, m12,
	// m20, m21, m22
	Matrix sensor = getSensorRotationFromSensorHardwareAsMatrix3x3();
	
	// This takes the sensor matrix in the sensor vendor's frame and changes it to the Unreal 3 frame
	matrixCob3x3( caseNumber,
		sensor.m00, sensor.m01, sensor.m02,
		sensor.m10, sensor.m11, sensor.m12,
		sensor.m20, sensor.m21, sensor.m22);
</pre>
<p>
Euler angles are only defined in an axis frame relative to an actor.  Yaw is a rotation around the Up direction.  Pitch is a rotation around
the right or left axes.  Roll is a rotation around the forward axis.  The sign of the rotation is defined by the Right Hand Rule.  The provided
code will change the basis of Yaw, Pitch and Roll Euler angles.
</p>
<pre>
	using namespace cob;
	
	triple sensorVendor( RIGHT, FORWARD, UP );
	triple unreal3( FORWARD, RIGHT, UP );
	
	// This sets up the transform from the sensor vendor's frame to the Unreal 3 frame
	int eulerCaseNumber = getEulerCaseNumber( sensorVendor, unreal3 );
	
	// It doesn't matter if the angles are in radians or degrees.  The Change of Basis for Euler Angles
	// can only change their signs.
	double yaw, pitch, roll; 
	
	getSensorRotationFromSensorHardwareAsYawPitchRoll(yaw, pitch, roll);
	
	// This takes the sensor orientation in the sensor vendor's frame and changes it to the Unreal 3 frame
	eulerCob( eulerCaseNumber, yaw, pitch, roll );
</pre>

<h2>History</h2>

<p>Keep a running update of any changes or improvements you've made here. </p>

<!-------------------------------    That's it!   --------------------------->
</body>

</html>

